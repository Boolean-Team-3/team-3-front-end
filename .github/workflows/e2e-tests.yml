name: Frontend e2e w/ back-end

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch: {}

jobs:
  e2e:
    runs-on: ubuntu-latest

    env:
      CONFIGURATION: Debug
      EF_PROJECT: exercise.wwwapi
      STARTUP_PROJECT: exercise.wwwapi
      ASPNETCORE_ENVIRONMENT: Debug
      REACT_APP_DEBUG_API_LOGS: '1'
      ConnectionString: ${{ secrets.CI_DB_CONNECTION_STRING }}

    steps:
      # Checkout frontend (this repo)
      - name: Checkout frontend
        uses: actions/checkout@v4

      # Checkout backend into ./backend
      - name: Checkout backend
        uses: actions/checkout@v4
        with:
          repository: boolean-uk/csharp-team-dev-server-team-3
          ref: main
          path: backend

      # Setup .NET
      - name: Setup .NET 9
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore backend
        working-directory: backend
        run: dotnet restore $STARTUP_PROJECT

      # Apply EF Core migrations (no per-run migration generation)
      - name: Apply EF Core migrations
        run: |
          dotnet tool update --global dotnet-ef || dotnet tool install --global dotnet-ef
          echo "$HOME/.dotnet/tools" >> $GITHUB_PATH
          dotnet ef database update \
            --project "backend/$EF_PROJECT" \
            --startup-project "backend/$STARTUP_PROJECT" \
            --configuration $CONFIGURATION \
            --connection "$ConnectionString"

      - name: Start backend
        working-directory: backend
        run: |
          dotnet run --project "$STARTUP_PROJECT" -c "$CONFIGURATION" --launch-profile https -- &
          echo "Backend starting in background..."

      - name: Wait for backend (HTTPS, ignore cert)
        run: |
          for i in {1..60}; do
            if curl -ksS https://localhost:7233 >/dev/null 2>&1; then
              exit 0
            fi
            sleep 2
          done
          echo "Backend did not start in time" >&2
          exit 1

      # Setup Node and install deps
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      # Install Playwright browsers and required OS deps
      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      # Run tests (Playwright will start the web server defined in playwright.config)
      - name: Run Playwright tests
        run: npx playwright test
